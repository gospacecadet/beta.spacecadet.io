{"version":3,"sources":["meteor://ðŸ’»app/packages/edgee_slingshot/packages/edgee_slingshot.js"],"names":[],"mappingsfile":"/packages/edgee_slingshot.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/lib/restrictions.js                                  //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n/**                                                                              // 1\n * @module meteor-slingshot                                                      // 2\n */                                                                              // 3\n                                                                                 // 4\nSlingshot = {};                                                                  // 5\n                                                                                 // 6\n/* global matchAllowedFileTypes: true */                                         // 7\nmatchAllowedFileTypes = Match.OneOf(String, [String], RegExp, null);             // 8\n                                                                                 // 9\n/**                                                                              // 10\n * List of configured restrictions by name.                                      // 11\n *                                                                               // 12\n * @type {Object.<String, Function>}                                             // 13\n * @private                                                                      // 14\n */                                                                              // 15\n                                                                                 // 16\nSlingshot._restrictions = {};                                                    // 17\n                                                                                 // 18\n/**                                                                              // 19\n * Creates file upload restrictions for a specific directive.                    // 20\n *                                                                               // 21\n * @param {string} name - A unique identifier of the directive.                  // 22\n * @param {Object} restrictions - The file upload restrictions.                  // 23\n * @returns {Object}                                                             // 24\n */                                                                              // 25\n                                                                                 // 26\nSlingshot.fileRestrictions = function (name, restrictions) {                     // 27\n  check(restrictions, {                                                          // 28\n    authorize: Match.Optional(Function),                                         // 29\n    maxSize: Match.Optional(Match.OneOf(Number, null)),                          // 30\n    allowedFileTypes: Match.Optional(matchAllowedFileTypes)                      // 31\n  });                                                                            // 32\n                                                                                 // 33\n  if (Meteor.isServer) {                                                         // 34\n    var directive = Slingshot.getDirective(name);                                // 35\n    if (directive) {                                                             // 36\n      _.extend(directive._directive, restrictions);                              // 37\n    }                                                                            // 38\n  }                                                                              // 39\n                                                                                 // 40\n  return (Slingshot._restrictions[name] =                                        // 41\n    _.extend(Slingshot._restrictions[name] || {}, restrictions));                // 42\n};                                                                               // 43\n                                                                                 // 44\n/**                                                                              // 45\n * @param {string} name - The unique identifier of the directive to              // 46\n * retrieve the restrictions for.                                                // 47\n * @returns {Object}                                                             // 48\n */                                                                              // 49\n                                                                                 // 50\nSlingshot.getRestrictions = function (name) {                                    // 51\n  return this._restrictions[name] || {};                                         // 52\n};                                                                               // 53\n                                                                                 // 54\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/lib/validators.js                                    //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nSlingshot.Validators = {                                                         // 1\n                                                                                 // 2\n /**                                                                             // 3\n  *                                                                              // 4\n  * @method checkAll                                                             // 5\n  *                                                                              // 6\n  * @throws Meteor.Error                                                         // 7\n  *                                                                              // 8\n  * @param {Object} context                                                      // 9\n  * @param {FileInfo} file                                                       // 10\n  * @param {Object} [meta]                                                       // 11\n  * @param {Object} [restrictions]                                               // 12\n  *                                                                              // 13\n  * @returns {Boolean}                                                           // 14\n  */                                                                             // 15\n                                                                                 // 16\n  checkAll: function (context, file, meta, restrictions) {                       // 17\n    return this.checkFileSize(file.size, restrictions.maxSize) &&                // 18\n      this.checkFileType(file.type, restrictions.allowedFileTypes) &&            // 19\n      (typeof restrictions.authorize !== 'function' ||                           // 20\n        restrictions.authorize.call(context, file, meta));                       // 21\n  },                                                                             // 22\n                                                                                 // 23\n  /**                                                                            // 24\n   * @throws Meteor.Error                                                        // 25\n   *                                                                             // 26\n   * @param {Number} size - Size of file in bytes.                               // 27\n   * @param {Number} maxSize - Max size of file in bytes.                        // 28\n   * @returns {boolean}                                                          // 29\n   */                                                                            // 30\n                                                                                 // 31\n  checkFileSize: function (size, maxSize) {                                      // 32\n    maxSize = Math.min(maxSize, Infinity);                                       // 33\n                                                                                 // 34\n    if (maxSize && size > maxSize)                                               // 35\n      throw new Meteor.Error(\"Upload denied\", \"File exceeds allowed size of \" +  // 36\n      formatBytes(maxSize));                                                     // 37\n                                                                                 // 38\n    return true;                                                                 // 39\n  },                                                                             // 40\n                                                                                 // 41\n  /**                                                                            // 42\n   *                                                                             // 43\n   * @throws Meteor.Error                                                        // 44\n   *                                                                             // 45\n   * @param {String} type - Mime type                                            // 46\n   * @param {(RegExp|Array|String)} [allowed] - Allowed file type(s)             // 47\n   * @returns {boolean}                                                          // 48\n   */                                                                            // 49\n                                                                                 // 50\n  checkFileType: function (type, allowed) {                                      // 51\n    if (allowed instanceof RegExp) {                                             // 52\n                                                                                 // 53\n      if (!allowed.test(type))                                                   // 54\n        throw new Meteor.Error(\"Upload denied\",                                  // 55\n          type + \" is not an allowed file type\");                                // 56\n                                                                                 // 57\n      return true;                                                               // 58\n    }                                                                            // 59\n                                                                                 // 60\n    if (_.isArray(allowed)) {                                                    // 61\n      if (allowed.indexOf(type) < 0) {                                           // 62\n        throw new Meteor.Error(\"Upload denied\",                                  // 63\n          type + \" is not one of the followed allowed file types: \" +            // 64\n          allowed.join(\", \"));                                                   // 65\n      }                                                                          // 66\n                                                                                 // 67\n      return true;                                                               // 68\n    }                                                                            // 69\n                                                                                 // 70\n    if (allowed && allowed !== type) {                                           // 71\n      throw new Meteor.Error(\"Upload denied\", \"Only files of type \" + allowed +  // 72\n        \" can be uploaded\");                                                     // 73\n    }                                                                            // 74\n                                                                                 // 75\n    return true;                                                                 // 76\n  }                                                                              // 77\n};                                                                               // 78\n                                                                                 // 79\n/** Human readable data-size in bytes.                                           // 80\n *                                                                               // 81\n * @param size {Number}                                                          // 82\n * @returns {string}                                                             // 83\n */                                                                              // 84\n                                                                                 // 85\nfunction formatBytes(size) {                                                     // 86\n  var units = ['Bytes', 'KB', 'MB', 'GB', 'TB'],                                 // 87\n      unit = units.shift();                                                      // 88\n                                                                                 // 89\n  while (size >= 0x400 && units.length) {                                        // 90\n    size /= 0x400;                                                               // 91\n    unit = units.shift();                                                        // 92\n  }                                                                              // 93\n                                                                                 // 94\n  return (Math.round(size * 100) / 100) + \" \" + unit;                            // 95\n}                                                                                // 96\n                                                                                 // 97\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/lib/directive.js                                     //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n/**                                                                              // 1\n * @callback Directive~authorize                                                 // 2\n *                                                                               // 3\n * The meteor method context is passed on to this function, including            // 4\n * this.userId                                                                   // 5\n *                                                                               // 6\n * @throws Meteor.Error                                                          // 7\n *                                                                               // 8\n * @param {{size: Number, type: String, name: String}} file - File to be         // 9\n * uploaded                                                                      // 10\n * @param {Object} [meta] - Meta information provided by the client.             // 11\n *                                                                               // 12\n * @returns Boolean Return true to authorize the requested upload.               // 13\n */                                                                              // 14\n                                                                                 // 15\n/**                                                                              // 16\n * @typedef {Object} Directive                                                   // 17\n *                                                                               // 18\n * @property {Number} maxSize - Maximum size in bytes                            // 19\n * @property {(string, Array.<String>, RegExp, null)} allowedFileTypes - MIME    // 20\n * types that can be uploaded. If null is passed, then all file types are        // 21\n * allowed.                                                                      // 22\n *                                                                               // 23\n * @property {Directive~authorize} authorize - Function to determine whether a   // 24\n * file-upload is authorized or not.                                             // 25\n *                                                                               // 26\n * @property {String} [cacheControl] - rfc2616 Cache-Control directive (if       // 27\n * applicable to the selected storage service)                                   // 28\n *                                                                               // 29\n * @property {String} [contentDisposition] - rfc2616 Content-Disposition         // 30\n * directive. Defaults to \"inline; <uploaded file name>\"                         // 31\n *                                                                               // 32\n * @property {String}                                                            // 33\n */                                                                              // 34\n                                                                                 // 35\n/**                                                                              // 36\n * @typedef {Object} FileInfo                                                    // 37\n *                                                                               // 38\n * @property {String} [name] - Given name to the file.                           // 39\n * @property {Number} size - File-size in bytes.                                 // 40\n * @property {String} [type] - mime type.                                        // 41\n *                                                                               // 42\n */                                                                              // 43\n                                                                                 // 44\n/**                                                                              // 45\n * @typedef {Object} UploadInstructions                                          // 46\n *                                                                               // 47\n * @property {String} upload - POST URL                                          // 48\n * @property {String} download - Download URL                                    // 49\n * @property {Array.<{name: String, value: Object}>} postData - POST data to be  // 50\n * transferred to storage service along with credentials.                        // 51\n */                                                                              // 52\n                                                                                 // 53\n/**                                                                              // 54\n * List of installed directives by name.                                         // 55\n *                                                                               // 56\n * @type {Object.<string, Directive>}                                            // 57\n * @private                                                                      // 58\n */                                                                              // 59\n                                                                                 // 60\nSlingshot._directives = {};                                                      // 61\n                                                                                 // 62\n/**                                                                              // 63\n * Creates file upload directive that defines a set of rule by which a file may  // 64\n * be uploaded.                                                                  // 65\n *                                                                               // 66\n * @param {string} name - A unique identifier of the directive.                  // 67\n * @param {Object} service - A storage service to use.                           // 68\n * @param {Directive} options                                                    // 69\n * @returns {Slingshot.Directive}                                                // 70\n */                                                                              // 71\n                                                                                 // 72\nSlingshot.createDirective = function (name, service, options) {                  // 73\n  if (_.has(Slingshot._directives, name))                                        // 74\n    throw new Error(\"Directive '\" + name + \"' already exists\");                  // 75\n                                                                                 // 76\n  var restrictions = Slingshot.getRestrictions(name);                            // 77\n  _.defaults(options, restrictions);                                             // 78\n                                                                                 // 79\n  return (Slingshot._directives[name] =                                          // 80\n    new Slingshot.Directive(service, options));                                  // 81\n};                                                                               // 82\n                                                                                 // 83\n/**                                                                              // 84\n * @param {string} name - The unique identifier of the directive to be           // 85\n * retrieved.                                                                    // 86\n * @returns {Slingshot.Directive}                                                // 87\n */                                                                              // 88\n                                                                                 // 89\nSlingshot.getDirective = function (name) {                                       // 90\n  return this._directives[name];                                                 // 91\n};                                                                               // 92\n                                                                                 // 93\n/**                                                                              // 94\n * @param {Object} service                                                       // 95\n * @param {Directive} directive                                                  // 96\n * @constructor                                                                  // 97\n */                                                                              // 98\n                                                                                 // 99\nSlingshot.Directive = function (service, directive) {                            // 100\n  check(this, Slingshot.Directive);                                              // 101\n                                                                                 // 102\n  //service does not have to be a plain-object, so checking fields individually  // 103\n  check(service.directiveMatch, Object);                                         // 104\n  check(service.upload, Function);                                               // 105\n  check(service.maxSize, Match.Optional(Number));                                // 106\n  check(service.allowedFileTypes, Match.Optional(matchAllowedFileTypes));        // 107\n                                                                                 // 108\n  _.defaults(directive, service.directiveDefault);                               // 109\n                                                                                 // 110\n  check(directive, _.extend({                                                    // 111\n    authorize: Function,                                                         // 112\n    maxSize: Match.Where(function (size) {                                       // 113\n      check(size, Match.OneOf(Number, null));                                    // 114\n                                                                                 // 115\n      return !size || size > 0 && size <= (service.maxSize || Infinity);         // 116\n    }),                                                                          // 117\n    allowedFileTypes: matchAllowedFileTypes,                                     // 118\n    cdn: Match.Optional(String)                                                  // 119\n  }, service.directiveMatch));                                                   // 120\n                                                                                 // 121\n  /**                                                                            // 122\n   * @method storageService                                                      // 123\n   * @returns {Object}                                                           // 124\n   */                                                                            // 125\n                                                                                 // 126\n  this.storageService = function () {                                            // 127\n    return service;                                                              // 128\n  };                                                                             // 129\n                                                                                 // 130\n  /**                                                                            // 131\n   * @private                                                                    // 132\n   * @property {Directive} _directive                                            // 133\n   */                                                                            // 134\n                                                                                 // 135\n  this._directive = directive;                                                   // 136\n};                                                                               // 137\n                                                                                 // 138\n_.extend(Slingshot.Directive.prototype, {                                        // 139\n                                                                                 // 140\n  /**                                                                            // 141\n   * @param {{userId: String}} method                                            // 142\n   * @param {FileInfo} file                                                      // 143\n   * @param {Object} [meta]                                                      // 144\n   *                                                                             // 145\n   * @returns UploadInstructions                                                 // 146\n   */                                                                            // 147\n                                                                                 // 148\n  getInstructions: function (method, file, meta) {                               // 149\n    var instructions = this.storageService().upload(method, this._directive,     // 150\n      file, meta);                                                               // 151\n                                                                                 // 152\n    check(instructions, {                                                        // 153\n      upload: String,                                                            // 154\n      download: String,                                                          // 155\n      postData: [{                                                               // 156\n        name: String,                                                            // 157\n        value: Match.OneOf(String, Number, null)                                 // 158\n      }],                                                                        // 159\n      headers: Match.Optional(Object)                                            // 160\n    });                                                                          // 161\n                                                                                 // 162\n    return instructions;                                                         // 163\n  },                                                                             // 164\n                                                                                 // 165\n /**                                                                             // 166\n  *                                                                              // 167\n  * @method requestAuthorization                                                 // 168\n  *                                                                              // 169\n  * @throws Meteor.Error                                                         // 170\n  *                                                                              // 171\n  * @param {Object} context                                                      // 172\n  * @param {FileInfo} file                                                       // 173\n  * @param {Object} [meta]                                                       // 174\n  *                                                                              // 175\n  * @returns {Boolean}                                                           // 176\n  */                                                                             // 177\n                                                                                 // 178\n  requestAuthorization: function (context, file, meta) {                         // 179\n    var validators = Slingshot.Validators,                                       // 180\n        restrictions = _.pick(this._directive,                                   // 181\n          ['authorize', 'maxSize', 'allowedFileTypes']                           // 182\n        );                                                                       // 183\n                                                                                 // 184\n    return validators.checkAll(context, file, meta, restrictions);               // 185\n  }                                                                              // 186\n                                                                                 // 187\n});                                                                              // 188\n                                                                                 // 189\nMeteor.methods({                                                                 // 190\n  /**                                                                            // 191\n   * Requests to perform a file upload.                                          // 192\n   *                                                                             // 193\n   * @param {String} directiveName                                               // 194\n   * @param {FileInfo} file                                                      // 195\n   * @param {Object} [meta]                                                      // 196\n   *                                                                             // 197\n   * @returns {UploadInstructions}                                               // 198\n   */                                                                            // 199\n                                                                                 // 200\n  \"slingshot/uploadRequest\": function (directiveName, file, meta) {              // 201\n    check(directiveName, String);                                                // 202\n    check(file, {                                                                // 203\n      type: Match.Optional(Match.Where(function (type) {                         // 204\n        check(type, String);                                                     // 205\n        return !type || /^[^\\/]+\\/[^\\/]+$/.test(type);                           // 206\n      })),                                                                       // 207\n      name: Match.Optional(String),                                              // 208\n      size: Match.Where(function (size) {                                        // 209\n        check(size, Number);                                                     // 210\n        return size >= 0;                                                        // 211\n      })                                                                         // 212\n    });                                                                          // 213\n                                                                                 // 214\n    if (!file.type)                                                              // 215\n      delete file.type;                                                          // 216\n                                                                                 // 217\n    check(meta, Match.Optional(Match.OneOf(Object, null)));                      // 218\n                                                                                 // 219\n    var directive = Slingshot.getDirective(directiveName);                       // 220\n                                                                                 // 221\n    if (!directive) {                                                            // 222\n      throw new Meteor.Error(\"Invalid directive\",                                // 223\n        \"The directive \" + directiveName + \" does not seem to exist\");           // 224\n    }                                                                            // 225\n                                                                                 // 226\n    if (!directive.requestAuthorization(this, file, meta)) {                     // 227\n      throw new Meteor.Error(\"Unauthorized\", \"You are not allowed to \" +         // 228\n        \"upload this file\");                                                     // 229\n    }                                                                            // 230\n                                                                                 // 231\n    return directive.getInstructions(this, file, meta);                          // 232\n  }                                                                              // 233\n});                                                                              // 234\n                                                                                 // 235\nfunction quoteString(string, quotes) {                                           // 236\n  return quotes + string.replace(quotes, '\\\\' + quotes) + quotes;                // 237\n}                                                                                // 238\n                                                                                 // 239\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/lib/storage-policy.js                                //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n                                                                                 // 1\n/**                                                                              // 2\n * @constructor                                                                  // 3\n */                                                                              // 4\n                                                                                 // 5\nSlingshot.StoragePolicy = function () {                                          // 6\n                                                                                 // 7\n  /**                                                                            // 8\n   * @type {{[expiration]: String, conditions: Array.<(Object|Array)>}}          // 9\n   */                                                                            // 10\n                                                                                 // 11\n  var policy = {conditions: []};                                                 // 12\n                                                                                 // 13\n  var self = this;                                                               // 14\n                                                                                 // 15\n  _.extend(self, {                                                               // 16\n                                                                                 // 17\n    /** Set policy expiration time (as an absolute value).                       // 18\n     *                                                                           // 19\n     * Subsequent calls override previous expiration values.                     // 20\n     *                                                                           // 21\n     * @param {Date} deadline                                                    // 22\n     *                                                                           // 23\n     * @returns {Slingshot.StoragePolicy}                                        // 24\n     */                                                                          // 25\n                                                                                 // 26\n    expire: function (deadline) {                                                // 27\n      check(deadline, Date);                                                     // 28\n                                                                                 // 29\n      policy.expiration = deadline.toISOString();                                // 30\n                                                                                 // 31\n      return self;                                                               // 32\n    },                                                                           // 33\n                                                                                 // 34\n                                                                                 // 35\n    /** Adds a constraint in which a property must equal a value.                // 36\n     *                                                                           // 37\n     * @param {(String|Object.<String, String>)} property                        // 38\n     * @param {String} [value]                                                   // 39\n     *                                                                           // 40\n     * @returns {Slingshot.StoragePolicy}                                        // 41\n     */                                                                          // 42\n                                                                                 // 43\n    match: function (property, value) {                                          // 44\n      if (_.isObject(property)) {                                                // 45\n        _.each(property, function (value, property) {                            // 46\n          self.match(property, value);                                           // 47\n        });                                                                      // 48\n      }                                                                          // 49\n      else if (property && !_.isUndefined(value)) {                              // 50\n        var constraint = {};                                                     // 51\n                                                                                 // 52\n        constraint[property] = value;                                            // 53\n                                                                                 // 54\n        policy.conditions.push(constraint);                                      // 55\n      }                                                                          // 56\n                                                                                 // 57\n      return self;                                                               // 58\n    },                                                                           // 59\n                                                                                 // 60\n    /** Set expiration time to a future value (relative from now)                // 61\n     *                                                                           // 62\n     * Subsequent calls override previous expiration values.                     // 63\n     *                                                                           // 64\n     * @param {Number} ms - Number of milliseconds in the future.                // 65\n     *                                                                           // 66\n     * @return {Slingshot.StoragePolicy}                                         // 67\n     */                                                                          // 68\n                                                                                 // 69\n    expireIn: function (ms) {                                                    // 70\n      return self.expire(new Date(Date.now() + ms));                             // 71\n    },                                                                           // 72\n                                                                                 // 73\n    /** Adds a starts-with constraint.                                           // 74\n     *                                                                           // 75\n     * @param {string} field - Name of the field without the preceding '$'       // 76\n     * @param {string} constraint - Value that the field must start with         // 77\n     * @returns {Slingshot.StoragePolicy}                                        // 78\n     */                                                                          // 79\n                                                                                 // 80\n    startsWith: function (field, constraint) {                                   // 81\n      policy.conditions.push([\"starts-with\", \"$\" + field, constraint]);          // 82\n      return self;                                                               // 83\n    },                                                                           // 84\n                                                                                 // 85\n    /** Adds a file-size constraint                                              // 86\n     *                                                                           // 87\n     * @param minimum {Number} Minimum file-size                                 // 88\n     * @param maximum {Number} Maximum file-size                                 // 89\n     * @returns {Slingshot.StoragePolicy}                                        // 90\n     */                                                                          // 91\n                                                                                 // 92\n    contentLength: function (minimum, maximum) {                                 // 93\n      policy.conditions.push([\"content-length-range\", minimum, maximum]);        // 94\n      return self;                                                               // 95\n    },                                                                           // 96\n                                                                                 // 97\n    /**                                                                          // 98\n     * @returns {string}                                                         // 99\n     */                                                                          // 100\n                                                                                 // 101\n    stringify: function (encoding) {                                             // 102\n      /* global Buffer: false */                                                 // 103\n      return Buffer(JSON.stringify(policy), \"utf-8\")                             // 104\n        .toString(encoding || \"base64\");                                         // 105\n    }                                                                            // 106\n  });                                                                            // 107\n};                                                                               // 108\n                                                                                 // 109\n                                                                                 // 110\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/services/aws-s3.js                                   //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nSlingshot.S3Storage = {                                                          // 1\n                                                                                 // 2\n  accessId: \"AWSAccessKeyId\",                                                    // 3\n  secretKey: \"AWSSecretAccessKey\",                                               // 4\n                                                                                 // 5\n  directiveMatch: {                                                              // 6\n    bucket: String,                                                              // 7\n    bucketUrl: Match.OneOf(String, Function),                                    // 8\n                                                                                 // 9\n    region: Match.Where(function (region) {                                      // 10\n      check(region, String);                                                     // 11\n                                                                                 // 12\n      return /^[a-z]{2}-\\w+-\\d+$/.test(region);                                  // 13\n    }),                                                                          // 14\n                                                                                 // 15\n    AWSAccessKeyId: String,                                                      // 16\n    AWSSecretAccessKey: String,                                                  // 17\n                                                                                 // 18\n    acl: Match.Optional(Match.Where(function (acl) {                             // 19\n      check(acl, String);                                                        // 20\n                                                                                 // 21\n      return [                                                                   // 22\n          \"private\",                                                             // 23\n          \"public-read\",                                                         // 24\n          \"public-read-write\",                                                   // 25\n          \"authenticated-read\",                                                  // 26\n          \"bucket-owner-read\",                                                   // 27\n          \"bucket-owner-full-control\",                                           // 28\n          \"log-delivery-write\"                                                   // 29\n        ].indexOf(acl) >= 0;                                                     // 30\n    })),                                                                         // 31\n                                                                                 // 32\n    key: Match.OneOf(String, Function),                                          // 33\n                                                                                 // 34\n    expire: Match.Where(function (expire) {                                      // 35\n      check(expire, Number);                                                     // 36\n                                                                                 // 37\n      return expire > 0;                                                         // 38\n    }),                                                                          // 39\n                                                                                 // 40\n    cacheControl: Match.Optional(String),                                        // 41\n    contentDisposition: Match.Optional(Match.OneOf(String, Function, null))      // 42\n  },                                                                             // 43\n                                                                                 // 44\n  directiveDefault: _.chain(Meteor.settings)                                     // 45\n    .pick(\"AWSAccessKeyId\", \"AWSSecretAccessKey\")                                // 46\n    .extend({                                                                    // 47\n      bucket: Meteor.settings.S3Bucket,                                          // 48\n      bucketUrl: function (bucket, region) {                                     // 49\n        var bucketDomain = \"s3-\" + region + \".amazonaws.com\";                    // 50\n        if (region === \"us-east-1\")                                              // 51\n          bucketDomain = \"s3.amazonaws.com\";                                     // 52\n                                                                                 // 53\n        if (bucket.indexOf(\".\") !== -1)                                          // 54\n          return \"https://\" + bucketDomain + \"/\" + bucket;                       // 55\n                                                                                 // 56\n        return \"https://\" + bucket + \".\" + bucketDomain;                         // 57\n      },                                                                         // 58\n      region: Meteor.settings.AWSRegion || \"us-east-1\",                          // 59\n      expire: 5 * 60 * 1000 //in 5 minutes                                       // 60\n    })                                                                           // 61\n    .value(),                                                                    // 62\n                                                                                 // 63\n  getContentDisposition: function (method, directive, file, meta) {              // 64\n    var getContentDisposition = directive.contentDisposition;                    // 65\n                                                                                 // 66\n    if (!_.isFunction(getContentDisposition)) {                                  // 67\n      getContentDisposition = function () {                                      // 68\n        var filename = file.name && encodeURIComponent(file.name);               // 69\n                                                                                 // 70\n        return directive.contentDisposition || filename &&                       // 71\n          \"inline; filename=\\\"\" + filename + \"\\\"; filename*=utf-8''\" +           // 72\n          filename;                                                              // 73\n      };                                                                         // 74\n    }                                                                            // 75\n                                                                                 // 76\n    return getContentDisposition.call(method, file, meta);                       // 77\n  },                                                                             // 78\n                                                                                 // 79\n  /**                                                                            // 80\n   *                                                                             // 81\n   * @param {{userId: String}} method                                            // 82\n   * @param {Directive} directive                                                // 83\n   * @param {FileInfo} file                                                      // 84\n   * @param {Object} [meta]                                                      // 85\n   *                                                                             // 86\n   * @returns {UploadInstructions}                                               // 87\n   */                                                                            // 88\n                                                                                 // 89\n  upload: function (method, directive, file, meta) {                             // 90\n    var policy = new Slingshot.StoragePolicy()                                   // 91\n          .expireIn(directive.expire)                                            // 92\n          .contentLength(0, Math.min(file.size, directive.maxSize || Infinity)), // 93\n                                                                                 // 94\n        payload = {                                                              // 95\n          key: _.isFunction(directive.key) ?                                     // 96\n            directive.key.call(method, file, meta) : directive.key,              // 97\n                                                                                 // 98\n          bucket: directive.bucket,                                              // 99\n                                                                                 // 100\n          \"Content-Type\": file.type,                                             // 101\n          \"acl\": directive.acl,                                                  // 102\n                                                                                 // 103\n          \"Cache-Control\": directive.cacheControl,                               // 104\n          \"Content-Disposition\": this.getContentDisposition(method, directive,   // 105\n            file, meta)                                                          // 106\n        },                                                                       // 107\n                                                                                 // 108\n        bucketUrl = _.isFunction(directive.bucketUrl) ?                          // 109\n          directive.bucketUrl(directive.bucket, directive.region) :              // 110\n          directive.bucketUrl,                                                   // 111\n                                                                                 // 112\n        downloadUrl = [                                                          // 113\n          (directive.cdn || bucketUrl),                                          // 114\n          payload.key                                                            // 115\n        ].map(function (part) {                                                  // 116\n            return part.replace(/\\/+$/, '');                                     // 117\n          }).join(\"/\");                                                          // 118\n                                                                                 // 119\n    this.applySignature(payload, policy, directive);                             // 120\n                                                                                 // 121\n    return {                                                                     // 122\n      upload: bucketUrl,                                                         // 123\n      download: downloadUrl,                                                     // 124\n      postData: [{                                                               // 125\n        name: \"key\",                                                             // 126\n        value: payload.key                                                       // 127\n      }].concat(_.chain(payload).omit(\"key\").map(function (value, name) {        // 128\n          return !_.isUndefined(value) && {                                      // 129\n              name: name,                                                        // 130\n              value: value                                                       // 131\n            };                                                                   // 132\n        }).compact().value())                                                    // 133\n    };                                                                           // 134\n  },                                                                             // 135\n                                                                                 // 136\n  /** Applies signature an upload payload                                        // 137\n   *                                                                             // 138\n   * @param {Object} payload - Data to be upload along with file                 // 139\n   * @param {Slingshot.StoragePolicy} policy                                     // 140\n   * @param {Directive} directive                                                // 141\n   */                                                                            // 142\n                                                                                 // 143\n  applySignature: function (payload, policy, directive) {                        // 144\n    var now =  new Date(),                                                       // 145\n        today = now.getUTCFullYear() + formatNumber(now.getUTCMonth() + 1, 2) +  // 146\n          formatNumber(now.getUTCDate(), 2),                                     // 147\n        service = \"s3\";                                                          // 148\n                                                                                 // 149\n    _.extend(payload, {                                                          // 150\n      \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\",                                     // 151\n      \"x-amz-credential\": [                                                      // 152\n        directive[this.accessId],                                                // 153\n        today,                                                                   // 154\n        directive.region,                                                        // 155\n        service,                                                                 // 156\n        \"aws4_request\"                                                           // 157\n      ].join(\"/\"),                                                               // 158\n      \"x-amz-date\": today + \"T000000Z\"                                           // 159\n    });                                                                          // 160\n                                                                                 // 161\n    payload.policy = policy.match(payload).stringify();                          // 162\n    payload[\"x-amz-signature\"] = this.signAwsV4(payload.policy,                  // 163\n      directive[this.secretKey], today, directive.region, service);              // 164\n  },                                                                             // 165\n                                                                                 // 166\n  /** Generate a AWS Signature Version 4                                         // 167\n   *                                                                             // 168\n   * @param {String} policy - Base64 encoded policy to sign.                     // 169\n   * @param {String} secretKey - AWSSecretAccessKey                              // 170\n   * @param {String} date - Signature date (yyyymmdd)                            // 171\n   * @param {String} region - AWS Data-Center region                             // 172\n   * @param {String} service - type of service to use                            // 173\n   * @returns {String} hex encoded HMAC-256 signature                            // 174\n   */                                                                            // 175\n                                                                                 // 176\n  signAwsV4: function (policy, secretKey, date, region, service) {               // 177\n    var dateKey = hmac256(\"AWS4\" + secretKey, date),                             // 178\n        dateRegionKey = hmac256(dateKey, region),                                // 179\n        dateRegionServiceKey= hmac256(dateRegionKey, service),                   // 180\n        signingKey = hmac256(dateRegionServiceKey, \"aws4_request\");              // 181\n                                                                                 // 182\n    return hmac256(signingKey, policy, \"hex\");                                   // 183\n  }                                                                              // 184\n};                                                                               // 185\n                                                                                 // 186\nSlingshot.S3Storage.TempCredentials = _.defaults({                               // 187\n                                                                                 // 188\n  directiveMatch: _.chain(Slingshot.S3Storage.directiveMatch)                    // 189\n    .omit(\"AWSAccessKeyId\", \"AWSSecretAccessKey\")                                // 190\n    .extend({                                                                    // 191\n      temporaryCredentials: Function                                             // 192\n    })                                                                           // 193\n    .value(),                                                                    // 194\n                                                                                 // 195\n  directiveDefault: _.omit(Slingshot.S3Storage.directiveDefault,                 // 196\n    \"AWSAccessKeyId\", \"AWSSecretAccessKey\"),                                     // 197\n                                                                                 // 198\n  applySignature: function (payload, policy, directive) {                        // 199\n    var credentials = directive.temporaryCredentials(directive.expire);          // 200\n                                                                                 // 201\n    check(credentials, Match.ObjectIncluding({                                   // 202\n      AccessKeyId: Slingshot.S3Storage.directiveMatch.AWSAccessKeyId,            // 203\n      SecretAccessKey: Slingshot.S3Storage.directiveMatch.AWSSecretAccessKey,    // 204\n      SessionToken: String                                                       // 205\n    }));                                                                         // 206\n                                                                                 // 207\n    payload[\"x-amz-security-token\"] = credentials.SessionToken;                  // 208\n                                                                                 // 209\n    return Slingshot.S3Storage.applySignature                                    // 210\n      .call(this, payload, policy, _.defaults({                                  // 211\n        AWSAccessKeyId: credentials.AccessKeyId,                                 // 212\n        AWSSecretAccessKey: credentials.SecretAccessKey                          // 213\n      }, directive));                                                            // 214\n  }                                                                              // 215\n}, Slingshot.S3Storage);                                                         // 216\n                                                                                 // 217\n                                                                                 // 218\nfunction formatNumber(num, digits) {                                             // 219\n  var string = String(num);                                                      // 220\n                                                                                 // 221\n  return Array(digits - string.length + 1).join(\"0\").concat(string);             // 222\n}                                                                                // 223\n                                                                                 // 224\nvar crypto = Npm.require(\"crypto\");                                              // 225\n                                                                                 // 226\nfunction hmac256(key, data, encoding) {                                          // 227\n  /* global Buffer: false */                                                     // 228\n  return crypto                                                                  // 229\n    .createHmac(\"sha256\", key)                                                   // 230\n    .update(new Buffer(data, \"utf-8\"))                                           // 231\n    .digest(encoding);                                                           // 232\n}                                                                                // 233\n                                                                                 // 234\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/services/google-cloud.js                             //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n//GoogleCloud is based on the very same api as AWS S3, so we extend it:          // 1\n                                                                                 // 2\nSlingshot.GoogleCloud = _.defaults({                                             // 3\n                                                                                 // 4\n  accessId: \"GoogleAccessId\",                                                    // 5\n  secretKey: \"GoogleSecretKey\",                                                  // 6\n                                                                                 // 7\n  directiveMatch: _.chain(Slingshot.S3Storage.directiveMatch)                    // 8\n    .omit(Slingshot.S3Storage.accessId, Slingshot.S3Storage.secretKey, \"region\") // 9\n    .extend({                                                                    // 10\n      GoogleAccessId: String,                                                    // 11\n      GoogleSecretKey: String,                                                   // 12\n                                                                                 // 13\n      acl: Match.Optional(Match.Where(function (acl) {                           // 14\n        check(acl, String);                                                      // 15\n                                                                                 // 16\n        return [                                                                 // 17\n            \"project-private\",                                                   // 18\n            \"private\",                                                           // 19\n            \"public-read\",                                                       // 20\n            \"public-read-write\",                                                 // 21\n            \"authenticated-read\",                                                // 22\n            \"bucket-owner-read\",                                                 // 23\n            \"bucket-owner-full-control\"                                          // 24\n          ].indexOf(acl) >= 0;                                                   // 25\n      }))                                                                        // 26\n    })                                                                           // 27\n    .value(),                                                                    // 28\n                                                                                 // 29\n  directiveDefault:  _.chain(Meteor.settings)                                    // 30\n    .pick(\"GoogleAccessId\")                                                      // 31\n    .extend(Slingshot.S3Storage.directiveDefault, {                              // 32\n      bucketUrl: function (bucket) {                                             // 33\n        return \"https://\" + bucket + \".storage.googleapis.com\";                  // 34\n      }                                                                          // 35\n    })                                                                           // 36\n    .omit(Slingshot.S3Storage.accessId, Slingshot.S3Storage.secretKey, \"region\") // 37\n    .value(),                                                                    // 38\n                                                                                 // 39\n  applySignature: function (payload, policy, directive) {                        // 40\n    payload[this.accessId] = directive[this.accessId];                           // 41\n    payload.policy = policy.match(_.omit(payload, this.accessId)).stringify();   // 42\n    payload.signature = this.sign(directive[this.secretKey], payload.policy);    // 43\n  },                                                                             // 44\n                                                                                 // 45\n  /**                                                                            // 46\n   * @param {String} secretKey - pem private key                                 // 47\n   * @param {String} policy                                                      // 48\n   * @returns {*|String}                                                         // 49\n   */                                                                            // 50\n                                                                                 // 51\n  sign: function (secretKey, policy) {                                           // 52\n    return Npm.require(\"crypto\")                                                 // 53\n      .createSign('RSA-SHA256')                                                  // 54\n      .update(policy)                                                            // 55\n      .sign(secretKey, \"base64\");                                                // 56\n  }                                                                              // 57\n}, Slingshot.S3Storage);                                                         // 58\n                                                                                 // 59\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/edgee:slingshot/services/rackspace.js                                //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nSlingshot.RackspaceFiles = {                                                     // 1\n                                                                                 // 2\n  directiveMatch: {                                                              // 3\n    RackspaceAccountId: String,                                                  // 4\n    RackspaceMetaDataKey: String,                                                // 5\n    container: String,                                                           // 6\n    region: String,                                                              // 7\n    pathPrefix: Match.OneOf(String, Function),                                   // 8\n    expire: Match.Where(function (expire) {                                      // 9\n      check(expire, Number);                                                     // 10\n                                                                                 // 11\n      return expire > 0;                                                         // 12\n    }),                                                                          // 13\n    deleteAt: Match.Optional(Date),                                              // 14\n    deleteAfter: Match.Optional(Number)                                          // 15\n  },                                                                             // 16\n                                                                                 // 17\n  directiveDefault: _.chain(Meteor.settings)                                     // 18\n    .pick(\"RackspaceAccountId\", \"RackspaceMetaDataKey\")                          // 19\n    .extend({                                                                    // 20\n      region: \"iad3\",                                                            // 21\n      expire: 5 * 60 * 1000 //in 5 minutes                                       // 22\n    })                                                                           // 23\n    .value(),                                                                    // 24\n                                                                                 // 25\n  version: \"v1\",                                                                 // 26\n                                                                                 // 27\n  path: function (directive, prefix) {                                           // 28\n    return \"/\" + [                                                               // 29\n      this.version,                                                              // 30\n      \"MossoCloudFS_\" + directive.RackspaceAccountId,                            // 31\n      directive.container,                                                       // 32\n      prefix                                                                     // 33\n    ].join(\"/\").replace(/\\/+/, \"/\");                                             // 34\n  },                                                                             // 35\n                                                                                 // 36\n  pathPrefix: function (method, directive, file, meta) {                         // 37\n    if (\"pathPrefix\" in directive) {                                             // 38\n      return (_.isFunction(directive.pathPrefix) ?                               // 39\n        directive.pathPrefix.call(method, file, meta) : directive.pathPrefix);   // 40\n    }                                                                            // 41\n    else {                                                                       // 42\n      return \"\";                                                                 // 43\n    }                                                                            // 44\n  },                                                                             // 45\n                                                                                 // 46\n  host: function (region) {                                                      // 47\n    return \"https://storage101.\" + region + \".clouddrive.com\";                   // 48\n  },                                                                             // 49\n                                                                                 // 50\n  maxSize: 0x140000000, //5GB                                                    // 51\n                                                                                 // 52\n  upload: function (method, directive, file, meta) {                             // 53\n    var pathPrefix = this.pathPrefix(method, directive, file, meta),             // 54\n        path = this.path(directive, pathPrefix),                                 // 55\n        host = this.host(directive.region),                                      // 56\n        url = host + path,                                                       // 57\n        data = [                                                                 // 58\n          {                                                                      // 59\n            name: \"redirect\",                                                    // 60\n            value: \"\"                                                            // 61\n          },                                                                     // 62\n          {                                                                      // 63\n            name: \"max_file_size\",                                               // 64\n            value: Math.min(file.size, directive.maxSize || this.maxSize)        // 65\n          },                                                                     // 66\n          {                                                                      // 67\n            name: \"max_file_count\",                                              // 68\n            value: 1                                                             // 69\n          },                                                                     // 70\n          {                                                                      // 71\n            name: \"expires\",                                                     // 72\n            value: Date.now() + directive.expire                                 // 73\n          }                                                                      // 74\n        ];                                                                       // 75\n                                                                                 // 76\n    data.push({                                                                  // 77\n        name: \"signature\",                                                       // 78\n        value: this.sign(directive.RackspaceMetaDataKey, path, data)             // 79\n    });                                                                          // 80\n                                                                                 // 81\n    if (\"deleteAt\" in directive)                                                 // 82\n      data.push({                                                                // 83\n        name: \"x_delete_at\",                                                     // 84\n        value: directive.deleteAt.getTime()                                      // 85\n      });                                                                        // 86\n                                                                                 // 87\n    if (\"deleteAfter\" in directive)                                              // 88\n      data.push({                                                                // 89\n        name: \"x_delete_after\",                                                  // 90\n        value: Math.round(directive.deleteAfter / 1000)                          // 91\n      });                                                                        // 92\n                                                                                 // 93\n    var cdn = directive.cdn;                                                     // 94\n                                                                                 // 95\n    return {                                                                     // 96\n      upload: url,                                                               // 97\n      download: (cdn && cdn + \"/\" + pathPrefix || host + path) + file.name,      // 98\n      postData: data                                                             // 99\n    };                                                                           // 100\n  },                                                                             // 101\n                                                                                 // 102\n  sign: function (secretkey, path, data) {                                       // 103\n    /* global Buffer: false */                                                   // 104\n    var policy = path + \"\\n\" + _.pluck(data, \"value\").join(\"\\n\");                // 105\n                                                                                 // 106\n    return Npm.require(\"crypto\")                                                 // 107\n      .createHmac(\"sha1\", secretkey)                                             // 108\n      .update(new Buffer(policy, \"utf-8\"))                                       // 109\n      .digest(\"hex\");                                                            // 110\n  }                                                                              // 111\n                                                                                 // 112\n};                                                                               // 113\n                                                                                 // 114\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}